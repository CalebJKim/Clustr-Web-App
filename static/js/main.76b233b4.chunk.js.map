{"version":3,"sources":["components/ClubInfo.module.css","components/Club.module.css","components/ClubList.module.css","components/Button.module.css","components/Button.js","components/Club.js","components/ClubInfo.js","components/ClubList.js","Colors.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","className","children","props","styles","button","Club","state","open","handleClick","setState","this","name","color","tags","description","meetingTime","meetingDay","wrapper","style","backgroundColor","onClick","map","tag","key","field","React","Component","ClubInfo","joinable","joinBtn","feedItem","feedTitle","feedField","ClubList","selectedClub","handleSelect","clubName","handleBack","clubs","selectedClubName","find","club","clubSelected","list","day","time","onSelect","info","backBtn","Colors","PINK","ORANGE","LIGHT_ORANGE","DARK_ORANGE","VERY_LIGHT_ORANGE","BLUE","BROWN","dayColors","Monday","Tuesday","Wednesday","Thursday","Friday","App","fetch","then","response","json","clubData","Object","entries","isNew","new","desc","tier","days","split","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76b233b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ClubInfo_wrapper__11oQn\",\"name\":\"ClubInfo_name__2BI2V\",\"description\":\"ClubInfo_description__BHxm1\",\"joinBtn\":\"ClubInfo_joinBtn__3tAch\",\"feedItem\":\"ClubInfo_feedItem__29jig\",\"feedTitle\":\"ClubInfo_feedTitle__jafwE\",\"feedField\":\"ClubInfo_feedField__2P83O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Club_wrapper__3j25p\",\"name\":\"Club_name__1zi_t\",\"tags\":\"Club_tags__19gWS\",\"tag\":\"Club_tag__tO-Kc\",\"field\":\"Club_field__29Z_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ClubList_wrapper__11lia\",\"list\":\"ClubList_list__1aukA\",\"info\":\"ClubList_info__pLVgg\",\"backBtn\":\"ClubList_backBtn__3a_Yq\",\"clubSelected\":\"ClubList_clubSelected__1_ad-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3MQk7\"};","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nfunction Button({className, children, ...props}) {\r\n  return (\r\n    <button className={`${styles.button} ${className}`} {...props}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styles from './Club.module.css';\r\n\r\nclass Club extends React.Component {\r\n  state = {\r\n    open: false\r\n  };\r\n\r\n  handleClick = () => {\r\n    // this.props.onSelect(this.props.name);\r\n    this.setState({\r\n      open: !this.state.open\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const {name, color, tags, description, meetingDay, meetingTime} = this.props;\r\n    const {open} = this.state;\r\n    return (\r\n      <button\r\n        className={styles.wrapper}\r\n        style={{backgroundColor: color}}\r\n        onClick={this.handleClick}\r\n      >\r\n        <h2 className={styles.name}>{name}</h2>\r\n        <ul className={styles.tags}>\r\n          {tags.map(tag => <li className={styles.tag} key={tag}>{tag}</li>)}\r\n        </ul>\r\n        {open && <>\r\n          <p className={styles.field}>{description}</p>\r\n          <p className={styles.field}>Time: {meetingTime}</p>\r\n        </>}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Club;\r\n","import React from 'react';\r\nimport Button from './Button.js';\r\nimport styles from './ClubInfo.module.css';\r\n\r\nclass ClubInfo extends React.Component {\r\n  render() {\r\n    const {name, description, joinable, meetingDay, meetingTime} = this.props;\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <h1 className={styles.name}>{name}</h1>\r\n        {joinable && (\r\n          <Button className={styles.joinBtn}>Join</Button>\r\n        )}\r\n        <p className={styles.description}>{description}</p>\r\n        <div className={styles.feedItem}>\r\n          <h2 className={styles.feedTitle}>Club Meetings</h2>\r\n          <p className={styles.feedField}>Weekly, {meetingDay}</p>\r\n          <p className={styles.feedField}>Time: {meetingTime}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClubInfo;\r\n","import React from 'react';\r\nimport Button from './Button.js';\r\nimport Club from './Club.js';\r\nimport ClubInfo from './ClubInfo.js';\r\nimport styles from './ClubList.module.css';\r\n\r\nclass ClubList extends React.Component {\r\n  state = {\r\n    selectedClub: null\r\n  };\r\n\r\n  handleSelect = clubName => {\r\n    // this.setState({\r\n    //   selectedClub: clubName\r\n    // });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      selectedClub: null\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {clubs} = this.props;\r\n    const {selectedClub: selectedClubName} = this.state;\r\n    const selectedClub = clubs.find(club => club.name === selectedClubName);\r\n    return (\r\n      <div className={`${styles.wrapper} ${selectedClub ? styles.clubSelected : ''}`}>\r\n        <div className={styles.list}>\r\n          {clubs.map(({name, description, day, time, color, tags}) => (\r\n            <Club\r\n              key={name}\r\n              name={name}\r\n              color={color}\r\n              tags={tags}\r\n              description={description}\r\n              meetingDay={day}\r\n              meetingTime={time}\r\n              onSelect={this.handleSelect}\r\n            />\r\n          ))}\r\n        </div>\r\n        {selectedClub && (\r\n          <div className={styles.info}>\r\n            <Button\r\n              className={styles.backBtn}\r\n              onClick={this.handleBack}\r\n            >&lt; Back</Button>\r\n            <ClubInfo\r\n              name={selectedClub.name}\r\n              description={selectedClub.description}\r\n              joinable={false}\r\n              meetingDay={selectedClub.day}\r\n              meetingTime={selectedClub.time}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClubList;\r\n","const Colors = {\r\n  PINK: '#ffa789',\r\n  ORANGE: '#f4b869',\r\n  LIGHT_ORANGE: '#f4cb87',\r\n  DARK_ORANGE: '#f0a35b',\r\n  VERY_LIGHT_ORANGE: '#f7cd96',\r\n  BLUE: '#A0B4C7',\r\n  BROWN: '#806961'\r\n};\r\n\r\nexport default Colors;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ClubList from './components/ClubList.js';\r\nimport Colors from './Colors.js';\r\n\r\nconst dayColors = {\r\n  Monday: Colors.VERY_LIGHT_ORANGE,\r\n  Tuesday: Colors.ORANGE,\r\n  Wednesday: Colors.PINK,\r\n  Thursday: Colors.DARK_ORANGE,\r\n  Friday: Colors.LIGHT_ORANGE\r\n};\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    clubs: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Load from UGWA (for now?) lol\r\n    fetch('https://orbiit.github.io/gunn-web-app/json/clubs.json?for=clustr')\r\n      .then(response => response.json())\r\n      .then(clubData => {\r\n        this.setState({\r\n          clubs: Object.entries(clubData).map(([name, {new: isNew, desc, day, time, tier}]) => {\r\n            const days = day.split(', ');\r\n            return {\r\n              name,\r\n              description: desc,\r\n              day,\r\n              time,\r\n              color: days.length > 1 ? Colors.BLUE : dayColors[day],\r\n              tags: [\r\n                ...days,\r\n                `Tier ${tier}`,\r\n                isNew ? 'New' : 'Returning'\r\n              ]\r\n            };\r\n          })\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ClubList clubs={this.state.clubs} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}