{"version":3,"sources":["components/ClubInfo.module.css","components/ClubList.module.css","components/Club.module.css","components/Button.module.css","components/Button.js","components/Club.js","components/ClubInfo.js","components/ClubList.js","Colors.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","className","children","props","styles","button","Club","handleClick","onSelect","name","this","color","tags","wrapper","style","backgroundColor","onClick","map","tag","key","React","Component","ClubInfo","description","joinable","meetingDay","meetingTime","joinBtn","feedItem","feedTitle","feedField","ClubList","state","selectedClub","handleSelect","clubName","setState","handleBack","clubs","selectedClubName","find","club","clubSelected","list","info","backBtn","day","time","Colors","PINK","ORANGE","LIGHT_ORANGE","DARK_ORANGE","VERY_LIGHT_ORANGE","BLUE","BROWN","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12fdc172.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ClubInfo_wrapper__11oQn\",\"name\":\"ClubInfo_name__2BI2V\",\"description\":\"ClubInfo_description__BHxm1\",\"joinBtn\":\"ClubInfo_joinBtn__3tAch\",\"feedItem\":\"ClubInfo_feedItem__29jig\",\"feedTitle\":\"ClubInfo_feedTitle__jafwE\",\"feedField\":\"ClubInfo_feedField__2P83O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ClubList_wrapper__11lia\",\"list\":\"ClubList_list__1aukA\",\"info\":\"ClubList_info__pLVgg\",\"backBtn\":\"ClubList_backBtn__3a_Yq\",\"clubSelected\":\"ClubList_clubSelected__1_ad-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Club_wrapper__3j25p\",\"name\":\"Club_name__1zi_t\",\"tags\":\"Club_tags__19gWS\",\"tag\":\"Club_tag__tO-Kc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3MQk7\"};","import React from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nfunction Button({className, children, ...props}) {\r\n  return (\r\n    <button className={`${styles.button} ${className}`} {...props}>\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styles from './Club.module.css';\r\n\r\nclass Club extends React.Component {\r\n  handleClick = () => {\r\n    this.props.onSelect(this.props.name);\r\n  };\r\n\r\n  render() {\r\n    const {name, color, tags} = this.props;\r\n    return (\r\n      <button\r\n        className={styles.wrapper}\r\n        style={{backgroundColor: color}}\r\n        onClick={this.handleClick}\r\n      >\r\n        <h2 className={styles.name}>{name}</h2>\r\n        <ul className={styles.tags}>\r\n          {tags.map(tag => <li className={styles.tag} key={tag}>{tag}</li>)}\r\n        </ul>\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Club;\r\n","import React from 'react';\r\nimport Button from './Button.js';\r\nimport styles from './ClubInfo.module.css';\r\n\r\nclass ClubInfo extends React.Component {\r\n  render() {\r\n    const {name, description, joinable, meetingDay, meetingTime} = this.props;\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <h1 className={styles.name}>{name}</h1>\r\n        {joinable && (\r\n          <Button className={styles.joinBtn}>Join</Button>\r\n        )}\r\n        <p className={styles.description}>{description}</p>\r\n        <div className={styles.feedItem}>\r\n          <h2 className={styles.feedTitle}>Club Meetings</h2>\r\n          <p className={styles.feedField}>Weekly, {meetingDay}</p>\r\n          <p className={styles.feedField}>Time: {meetingTime}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClubInfo;\r\n","import React from 'react';\r\nimport Button from './Button.js';\r\nimport Club from './Club.js';\r\nimport ClubInfo from './ClubInfo.js';\r\nimport styles from './ClubList.module.css';\r\n\r\nclass ClubList extends React.Component {\r\n  state = {\r\n    selectedClub: null\r\n  };\r\n\r\n  handleSelect = clubName => {\r\n    this.setState({\r\n      selectedClub: clubName\r\n    });\r\n  };\r\n\r\n  handleBack = () => {\r\n    this.setState({\r\n      selectedClub: null\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {clubs} = this.props;\r\n    const {selectedClub: selectedClubName} = this.state;\r\n    const selectedClub = clubs.find(club => club.name === selectedClubName);\r\n    return (\r\n      <div className={`${styles.wrapper} ${selectedClub ? styles.clubSelected : ''}`}>\r\n        <div className={styles.list}>\r\n          {clubs.map(({name, color, tags}) => (\r\n            <Club\r\n              key={name}\r\n              name={name}\r\n              color={color}\r\n              tags={tags}\r\n              onSelect={this.handleSelect}\r\n            />\r\n          ))}\r\n        </div>\r\n        {selectedClub && (\r\n          <div className={styles.info}>\r\n            <Button\r\n              className={styles.backBtn}\r\n              onClick={this.handleBack}\r\n            >&lt; Back</Button>\r\n            <ClubInfo\r\n              name={selectedClub.name}\r\n              description={selectedClub.description}\r\n              joinable={true}\r\n              meetingDay={selectedClub.day}\r\n              meetingTime={selectedClub.time}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ClubList;\r\n","const Colors = {\r\n  PINK: '#ffa789',\r\n  ORANGE: '#f4b869',\r\n  LIGHT_ORANGE: '#f4cb87',\r\n  DARK_ORANGE: '#f0a35b',\r\n  VERY_LIGHT_ORANGE: '#f7cd96',\r\n  BLUE: '#A0B4C7',\r\n  BROWN: '#806961'\r\n};\r\n\r\nexport default Colors;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ClubList from './components/ClubList.js';\r\nimport Colors from './Colors.js';\r\n\r\n// Random clubs for testing purposes\r\nconst clubs = [\r\n  {\r\n    name: 'Basketball Club',\r\n    description: 'Over the course of the year, we will learn about and develop computational techniques to analyze various major league sports. We will also go over some of the cutting edge tech that is used to give athletes a competitive advantage in the sports industry. Moreover, our club will invite industry experts from startups and major league sports teams to talk about their experiences in the fascinating field of Sports Analytics. At the end of the year, our aim is to participate in open source data science competitions (such as Kaggles)',\r\n    day: 'Friday',\r\n    time: '11:40:00 AM',\r\n    color: Colors.LIGHT_ORANGE,\r\n    tags: ['Friday', 'Tier 1']\r\n  },\r\n  {\r\n    name: 'Beat Production Club',\r\n    description: 'The Beat Production Club is the best jam avenue for students at Gunn; this club is open to all musicians: beat-makers, instrumentalists, vocalists, and songwriters, who will collaborate together and have a chance to get involved in the complete production of music. Non musician music enthusiasts are welcome too! The production environment is not stressful and students can bring creative ideas! Several genres will be welcomed and there will be a focus on hip-hop, R&B, jazz, and fusion! Students will have access to guest speaker events and find cool opportunities to enrich their musical journeys. Hop into the studio, record a trumpet lick, write some bars, program drums, add 808s and drop the tracks!',\r\n    day: 'Monday',\r\n    time: '3:10:00 PM',\r\n    color: Colors.ORANGE,\r\n    tags: ['Monday', 'Tier 1']\r\n  },\r\n  {\r\n    name: 'Chess Club',\r\n    description: 'The Gunn Chess Club is a club that will act as a network for Gunn high school students who enjoy video games, focusing on improving members and encouraging students to get into more serious competition while playing with and against each other. Specifically during meetings, we will watch and discuss professional eSports matches. As a club, we hope to remove the negative prejudices and stereotypes around video games and showcase the benefits that video games can bring, such as a sense of community, through supporting charities through methods such as donating tournament prize pools.',\r\n    day: 'Wednesday',\r\n    time: '11:40:00 AM',\r\n    color: Colors.PINK,\r\n    tags: ['Wednesday', 'Tier 2']\r\n  },\r\n  {\r\n    name: 'Service Club',\r\n    description: 'The Service Club is a community service club that works with the community organization, YCS, and the international program, Interact, to try and improve our community. Some of the events we put on are Service Day, Service Fair, Service Trip, and an Open Mic. We also regularly update club members on different community service opportunities as we are notified about them.',\r\n    day: 'Monday',\r\n    time: '12:35:00 PM',\r\n    color: Colors.BLUE,\r\n    tags: ['Monday', 'Tier 3']\r\n  }\r\n];\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ClubList clubs={clubs} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}